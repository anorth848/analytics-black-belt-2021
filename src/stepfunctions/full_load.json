{
    "Comment": "Launch the EMR cluster and perform a full load",
    "StartAt": "LaunchEMR",
    "States": {
        "LaunchEMR": {
            "Type": "Task",
            "Resource": "arn:aws:states:::elasticmapreduce:createCluster.sync",
            "InputPath": "$.lambda",
            "Parameters": {
                "Name.$": "$$.Execution.Name",
                "VisibleToAllUsers": true,
                "ReleaseLabel": "emr-6.4.0",
                "EbsRootVolumeSize": 10,
                "Tags": [
                    {
                        "Key": "for-use-with-amazon-emr-managed-policies",
                        "Value": "true"
                    }
                ],
                "Applications": [
                    { "Name": "Hive" },
                    { "Name": "Hadoop" },
                    { "Name": "Spark" }
                ],
                "ServiceRole": "${EmrServiceRole}",
                "JobFlowRole": "${EmrJobFlowRole}",
                "LogUri": "${EmrLogUri}",
                "StepConcurrencyLevel.$": "$.emr.step_parallelism",
                "BootstrapActions": [
                    {
                        "Name": "SyncLibsAndConfigs",
                        "ScriptBootstrapAction": {
                            "Path": "${ArtifactPrefixUri}/emr/bootstrap/bootstrap.sh",
                            "Args.$": "States.Array('${ArtifactPrefixUri}', $.runtime_configs)"
                        }
                    }
                ],
                "Instances": {
                    "Ec2SubnetIds.$": "States.Array('${EmrEc2SubnetIdA}', '${EmrEc2SubnetIdB}')",
                    "KeepJobFlowAliveWhenNoSteps": true,
                    "InstanceFleets": [
                        {
                            "InstanceFleetType": "MASTER",
                            "InstanceTypeConfigs": [
                                {
                                    "EbsConfiguration": {
                                        "EbsBlockDeviceConfigs": [
                                            {
                                                "VolumeSpecification": {
                                                    "SizeInGB": 32,
                                                    "VolumeType": "gp2"
                                                },
                                                "VolumesPerInstance": 1
                                            }
                                        ]
                                    },
                                    "InstanceType.$": "$.emr.master.instance_type",
                                    "WeightedCapacity": 1
                                }
                            ],
                            "Name": "master-fleet",
                            "TargetOnDemandCapacity": 1
                        },
                        {
                            "InstanceFleetType": "CORE",
                            "InstanceTypeConfigs": [
                                {
                                    "EbsConfiguration": {
                                        "EbsBlockDeviceConfigs": [
                                            {
                                                "VolumeSpecification": {
                                                    "SizeInGB": 100,
                                                    "VolumeType": "gp2"
                                                },
                                                "VolumesPerInstance": 1
                                            }
                                        ]
                                    },
                                    "InstanceType.$": "$.emr.worker.instance_type",
                                    "WeightedCapacity": 1
                                }
                            ],
                            "Name": "core-fleet",
                            "TargetOnDemandCapacity.$": "$.emr.worker.count"
                        }
                    ]
                },
                "Configurations": [
                    {
                        "Classification":"hive-site",
                        "Properties": {
                            "hive.metastore.client.factory.class":"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
                        }
                    },
                    {
                        "Classification":"spark-hive-site",
                        "Properties":{
                            "hive.metastore.client.factory.class":"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
                        }
                    },
                    {
                        "Classification":"spark-defaults",
                        "Properties":{
                            "spark.serializer": "org.apache.spark.serializer.KryoSerializer",
                            "spark.sql.hive.convertMetastore": "false",
                            "spark.jars": "/usr/lib/spark/jars/hudi-spark3-bundle_2.12-0.10.0.jar,/usr/lib/spark/jars/spark-avro_2.12-3.1.2.jar,/usr/lib/spark/jars/hudi-utilities-bundle_2.12-0.10.0.jar"
                        }
                    },
                    {
                        "Classification":"spark-env",
                        "Properties":{},
                        "Configurations": [
                           {
                             "Classification": "export",
                             "Properties": {
                                 "LOG_LEVEL.$": "$.log_level",
                                 "LAKE_S3URI": "${LakeS3Uri}"
                             }
                           }
                        ]
                    }
                ]
            },
            "ResultPath": "$.cluster",
            "Next": "ParallelLoadSteps"
        },
        "ParallelLoadSteps": {
            "Type": "Map",
            "InputPath": "$",
            "ItemsPath": "$.lambda.tables",
            "Next": "SuccessOrFailChoice",
            "ResultPath": "$.steps",
            "Parameters": {
                "table_config.$": "$$.Map.Item.Value",
                "cluster_id.$": "$.cluster.ClusterId"
            },
            "Catch" : [
                {
                    "ErrorEquals": [ "States.ALL" ],
                    "ResultPath": "$.exception",
                    "Next": "SuccessOrFailChoice"
                }
            ],
            "Iterator": {
                "StartAt": "FullLoadStep",
                "States": {
                    "FullLoadStep": {
                        "Type": "Task",
                        "InputPath": "$",
                        "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
                        "ResultPath": "$.steps",
                        "Parameters": {
                            "ClusterId.$": "$.cluster_id",
                            "Step": {
                                "ActionOnFailure": "CONTINUE",
                                "HadoopJarStep": {
                                    "Args.$": "$.table_config.jar_step_args",
                                    "Jar": "command-runner.jar"
                                },
                                "Name.$": "$.table_config.table_name"
                            }
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [ "States.TaskFailed" ],
                                "IntervalSeconds": 5,
                                "MaxAttempts": 1,
                                "BackoffRate": 1.5
                            }
                        ],
                        "End": true
                    }
                }
            }
        },
        "SuccessOrFailChoice": {
            "Type": "Choice",
            "Comment": "If .exception exists in the state input, process the exception otherwise send success sns",
            "Choices": [
                {
                    "Variable": "$.exception",
                    "IsPresent": true,
                    "Next": "TransformException"
                },
                {
                    "Variable": "$.exception",
                    "IsPresent": false,
                    "Next": "SnsSendSuccess"
                }
            ]
        },
        "TransformException": {
            "Type": "Pass",
            "Comment": "The exception comes through as a json formatted string, transform to actual json for downstream",
            "Parameters": {
                "Error.$": "$.exception.Error",
                "Cause.$": "States.StringToJson($.exception.Cause)"
            },
            "ResultPath": "$.exception",
            "Next": "EmrFailureDetailsMessageOrReasonChoice"
        },
        "EmrFailureDetailsMessageOrReasonChoice": {
            "Type": "Choice",
            "Comment": "EMR API FailureDetails will contain Reason *or* Message attributes, determine here which we got",
            "Choices": [
                {
                    "Variable": "$.exception.Cause.Step.Status.FailureDetails.Reason",
                    "IsPresent": true,
                    "Next": "MungeEmrFailureDetailsForSns"
                },
                {
                    "Variable": "$.exception.Cause.Step.Status.FailureDetails.Message",
                    "IsPresent": true,
                    "Next": "SnsSendFailure"
                }
            ]
        },
        "MungeEmrFailureDetailsForSns": {
            "Type": "Pass",
            "Comment": "Copy Reason to Message for the downstream SnsSendFailure",
            "Parameters": {
                "Cause": {
                    "Step": {
                        "Status": {
                            "FailureDetails": {
                                "Message.$": "$.exception.Cause.Step.Status.FailureDetails.Reason",
                                "LogFile.$": "$.exception.Cause.Step.Status.FailureDetails.LogFile"
                            }
                        }
                    }
                },
                "Error.$": "$.exception.Error"
            },
            "ResultPath": "$.exception",
            "Next": "SnsSendFailure"
        },
        "SnsSendFailure": {
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "Parameters": {
                "TopicArn": "${RuntimeSnsTopicArn}",
                "Subject.$": "States.Format('FAILURE | Full Load | {} | {}', $.lambda.identifier, $.exception.Error)",
                "Message.$": "States.Format('Execution: {} Message: {} LogFile: {}', $$.Execution.Id, $.exception.Cause.Step.Status.FailureDetails.Message, $.exception.Cause.Step.Status.FailureDetails.LogFile)"
            },
            "Next": "TerminateCluster",
            "ResultPath": "$.sns_output"
        },
        "SnsSendSuccess": {
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "Parameters": {
                "TopicArn": "${RuntimeSnsTopicArn}",
                "Subject.$": "States.Format('SUCCESS | Full Load | {}', $.lambda.identifier)",
                "Message.$": "States.Format('Execution: {} Succeeded.', $$.Execution.Id)"
            },
            "Next": "TerminateCluster",
            "ResultPath": "$.sns_output"
        },
        "TerminateCluster": {
            "Type": "Task",
            "Resource": "arn:aws:states:::elasticmapreduce:terminateCluster",
            "InputPath": "$",
            "Parameters": {
                "ClusterId.$": "$.cluster.ClusterId"
            },
            "Next": "ExitSuccessOrFail",
            "ResultPath": "$.cluster.terminate_output"
        },
        "ExitSuccessOrFail": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.exception",
                    "IsPresent": true,
                    "Next": "ExitFail"
                },
                {
                    "Variable": "$.exception",
                    "IsPresent": false,
                    "Next": "ExitSuccess"
                }
            ]
        },
        "ExitSuccess": {
            "Type": "Succeed"
        },
        "ExitFail": {
          "Type": "Fail",
          "Cause": "Check SNS notification for details, or look in this execution's output.",
          "Error": "Error detected in EMR Job Steps."
        }
    }
}
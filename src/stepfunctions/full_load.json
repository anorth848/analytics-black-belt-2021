{
    "Comment": "Launch the EMR cluster and perform a full load",
    "StartAt": "LaunchEMR",
    "States": {
        "LaunchEMR": {
            "Type": "Task",
            "Resource": "arn:aws:states:::elasticmapreduce:createCluster.sync",
            "InputPath": "$.lambda",
            "Parameters": {
                "Name.$": "$$.Execution.Name",
                "VisibleToAllUsers": true,
                "ReleaseLabel": "emr-6.4.0",
                "EbsRootVolumeSize": 10,
                "Tags": [
                    {
                        "Key": "for-use-with-amazon-emr-managed-policies",
                        "Value": "true"
                    }
                ],
                "Applications": [
                    { "Name": "Hive" },
                    { "Name": "Hadoop" },
                    { "Name": "Spark" }
                ],
                "ServiceRole": "${EmrServiceRole}",
                "JobFlowRole": "${EmrJobFlowRole}",
                "LogUri": "${EmrLogUri}",
                "StepConcurrencyLevel.$": "$.emr.step_parallelism",
                "BootstrapActions": [
                    {
                        "Name": "SyncLibsAndConfigs",
                        "ScriptBootstrapAction": {
                            "Path": "${ArtifactPrefixUri}/emr/bootstrap/bootstrap.sh",
                            "Args.$": "States.Array('${ArtifactPrefixUri}', $.runtime_configs)"
                        }
                    }
                ],
                "Instances": {
                    "Ec2SubnetIds.$": "States.Array('${EmrEc2SubnetIdA}', '${EmrEc2SubnetIdB}')",
                    "KeepJobFlowAliveWhenNoSteps": true,
                    "InstanceFleets": [
                        {
                            "InstanceFleetType": "MASTER",
                            "InstanceTypeConfigs": [
                                {
                                    "EbsConfiguration": {
                                        "EbsBlockDeviceConfigs": [
                                            {
                                                "VolumeSpecification": {
                                                    "SizeInGB": 32,
                                                    "VolumeType": "gp2"
                                                },
                                                "VolumesPerInstance": 2
                                            }
                                        ]
                                    },
                                    "InstanceType.$": "$.emr.master.instance_type",
                                    "WeightedCapacity": 1
                                }
                            ],
                            "Name": "master-fleet",
                            "TargetOnDemandCapacity": 1
                        },
                        {
                            "InstanceFleetType": "CORE",
                            "InstanceTypeConfigs": [
                                {
                                    "EbsConfiguration": {
                                        "EbsBlockDeviceConfigs": [
                                            {
                                                "VolumeSpecification": {
                                                    "SizeInGB": 100,
                                                    "VolumeType": "gp2"
                                                },
                                                "VolumesPerInstance": 2
                                            }
                                        ]
                                    },
                                    "InstanceType.$": "$.emr.worker.instance_type",
                                    "WeightedCapacity": 1
                                }
                            ],
                            "Name": "core-fleet",
                            "TargetOnDemandCapacity.$": "$.emr.worker.count"
                        }
                    ]
                },
                "Configurations": [
                    {
                        "Classification":"hive-site",
                        "Properties": {
                            "hive.metastore.client.factory.class":"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
                        }
                    },
                    {
                        "Classification":"spark-hive-site",
                        "Properties":{
                            "hive.metastore.client.factory.class":"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
                        }
                    },
                    {
                        "Classification":"spark-defaults",
                        "Properties":{
                            "spark.serializer": "org.apache.spark.serializer.KryoSerializer",
                            "spark.sql.hive.convertMetastore": "false",
                            "spark.jars": "/usr/lib/spark/jars/hudi-spark3-bundle_2.12-0.10.0.jar,/usr/lib/spark/jars/spark-avro_2.12-3.1.2.jar"
                        }
                    },
                    {
                        "Classification":"spark-env",
                        "Properties":{},
                        "Configurations": [
                           {
                             "Classification": "export",
                             "Properties": {
                                 "LOG_LEVEL.$": "$.log_level"
                             }
                           }
                        ]
                    }
                ]
            },
            "ResultPath": "$.cluster",
            "Next": "ParallelLoadSteps"
        },
        "ParallelLoadSteps": {
            "Type": "Map",
            "InputPath": "$",
            "ItemsPath": "$.lambda.table_list",
            "Next": "TerminateCluster",
            "ResultPath": "$.steps",
            "Parameters": {
                "table_name.$": "$$.Map.Item.Value",
                "cluster_id.$": "$.cluster.ClusterId"
            },
            "Catch" : [
                {
                    "ErrorEquals": [ "States.ALL" ],
                    "ResultPath": "$.steps.errors",
                    "Next": "TerminateCluster"
                }
            ],
            "Iterator": {
                "StartAt": "FullLoadStep",
                "States": {
                    "FullLoadStep": {
                        "Type": "Task",
                        "InputPath": "$",
                        "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
                        "Parameters": {
                            "ClusterId.$": "$.cluster_id",
                            "Step": {
                                "ActionOnFailure": "CONTINUE",
                                "HadoopJarStep": {
                                    "Args.$": "States.Array('spark-submit', '/mnt/var/lib/instance-controller/public/scripts/full_load.py', '--table_name', $.table_name)",
                                    "Jar": "command-runner.jar"
                                },
                                "Name.$": "$.table_name"
                            }
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [ "States.TaskFailed" ],
                                "IntervalSeconds": 5,
                                "MaxAttempts": 5,
                                "BackoffRate": 1.5
                            }
                        ],
                        "End": true
                    }
                }
            }
        },
        "TerminateCluster": {
            "Type": "Task",
            "Resource": "arn:aws:states:::elasticmapreduce:terminateCluster",
            "InputPath": "$",
            "Parameters": {
                "ClusterId.$": "$.cluster.ClusterId"
            },
            "End": true
        }
    }
}
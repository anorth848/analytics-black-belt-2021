AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  #TODO

Parameters:
  ParentStack:
    Type: String
    Description: Parent stack this template was launched from, used for naming SSM parameters

  EmrEc2SubnetId:
    Type: String
    AllowedPattern: "subnet-[a-f0-9]+"
    Description: Subnet EMR clusters will run in

  # For more information about EMR security groups: https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-man-sec-groups.html
  EmrManagedMasterSecurityGroup:
    Type: String
    AllowedPattern: "sg-[a-f0-9]+"
    Description: Security group for EMR master

  EmrManagedSlaveSecurityGroup:
    Type: String
    AllowedPattern: "sg-[a-f0-9]+"
    Description: Security group for EMR workers

  AdditionalEmrSecurityGroup:
    Type: String
    AllowedPattern: "sg-[a-f0-9]+"
    Description: Additional security group to attach to EMR clusters
  # For more infomration about EMR IAM roles: https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-iam-roles.html
  EmrServiceRole:
    Type: String
    Default: "EMR_DefaultRole"
    Description: Service role for EMR clusters

  EmrJobFlowRole:
    Type: String
    Default: "EMR_EC2_DefaultRole"
    Description: EC2 Role for EMR clusters

  EmrAutoScalingRole:
    Type: String
    Default: "EMR_AutoScaling_DefaultRole"
    Description: Autoscaling role for EMR clusters

Resources:
  FullLoadStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "states.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole"]
          }
        ]
      }
      Description: Role for full load state machine
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEMRFullAccessPolicy_v2
      MaxSessionDuration: 43200

  FullLoadStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../src/stepfunctions/full_load.json
      DefinitionSubstitutions:
        #/da-black-belt-2021/cicd/artifact_bucket/prefix_uri
        ArtifactPrefixUri: !Join ['', [ '{{resolve:ssm:/', !Ref ParentStack, '/cicd/artifact_bucket/prefix_uri', '}}' ] ]
        AdditionalEmrSecurityGroup: !Ref AdditionalEmrSecurityGroup
        EmrEc2SubnetId: !Ref EmrEc2SubnetId
        EmrManagedMasterSecurityGroup: !Ref EmrManagedMasterSecurityGroup
        EmrManagedSlaveSecurityGroup: !Ref EmrManagedSlaveSecurityGroup
        EmrLogUri: !Sub 's3n://aws-logs-${AWS::AccountId}-${AWS::Region}/elasticmapreduce/'
        EmrServiceRole: !Ref EmrServiceRole
        EmrJobFlowRole: !Ref EmrJobFlowRole
        EmrAutoScalingRole: !Ref EmrAutoScalingRole
      Role: !GetAtt FullLoadStepFunctionRole.Arn
      Type: STANDARD

  FullLoadLambdaLaunchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        "Version": "2012-10-17"
        "Statement":
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Description: Role for full load state machine
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LaunchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: DynamoDB
                Effect: Allow
                Action:
                  - dynamodb:Describe*
                  - dynamodb:Query
                  - dynamodb:*GetItem*
                Resource: !Join ['', [ '{{resolve:ssm:/', !Ref ParentStack, '/runtime/config_table/arn', '}}' ] ]
              - Sid: S3
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Join ['', [ '{{resolve:ssm:/', !Ref ParentStack, '/runtime/bucket/arn', '}}' ] ]
                  - !Join ['', [ '{{resolve:ssm:/', !Ref ParentStack, '/runtime/bucket/arn', '}}/*' ] ]
              - Sid: StepFunction
                Effect: Allow
                Action:
                  - states:*Execution*
                  - states:Describe*
                Resource:
                  - !Ref FullLoadStepFunction
                  - !Join [':', [
                      !Sub 'arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution',
                      !GetAtt FullLoadStepFunction.Name,
                      '*'
                    ]]

  FullLoadLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/lambdas/launch_full_load/
      Description: Lambda Function for launching the Full Load step function
      Environment:
        Variables:
          STEPFUNCTION_ARN: !Ref FullLoadStepFunction
          CONFIG_TABLE: !Join ['', [ '{{resolve:ssm:/', !Ref ParentStack, '/runtime/config_table/name', '}}' ] ]
          RUNTIME_BUCKET: !Join ['', [ '{{resolve:ssm:/', !Ref ParentStack, '/runtime/bucket/name', '}}' ] ]
          LOG_LEVEL: 'INFO'
      Handler: handler.handler
      Role: !GetAtt FullLoadLambdaLaunchRole.Arn
      Runtime: python3.9
      Timeout: 60

  FullLoadStepFunctionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Step function arn
      Name: !Sub '/${ParentStack}/full_pipeline/sfn_arn'
      Type: String
      Value: !Ref FullLoadStepFunction
